# Generated by Django 5.0.6 on 2024-07-21 16:47

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Business',
            fields=[
                ('business_email', models.CharField(max_length=254, primary_key=True, serialize=False)),
                ('business_name', models.CharField(unique=True)),
                ('password', models.CharField()),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_at', models.DateTimeField(blank=True, null=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'businesses',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_name', models.CharField(blank=True, null=True)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('event_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'events',
            },
        ),
        migrations.CreateModel(
            name='Restriction',
            fields=[
                ('restriction_id', models.CharField(primary_key=True, serialize=False)),
                ('restriction_street', models.CharField()),
                ('restriction_fstreet', models.CharField()),
                ('restriction_tstreet', models.CharField()),
                ('restriction_street_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
                ('restriction_weekday', models.CharField()),
                ('restriction_ftime', models.TimeField()),
                ('restriction_ttime', models.TimeField()),
            ],
            options={
                'db_table': 'restrictions',
            },
        ),
        migrations.CreateModel(
            name='StreetBusynessScore',
            fields=[
                ('zoned_street_centroid', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('hour', models.DateTimeField()),
                ('score', models.FloatField()),
                ('zone_id', models.IntegerField()),
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'street_busyness_score_precalc',
            },
        ),
        migrations.CreateModel(
            name='TaxiZone',
            fields=[
                ('zone_id', models.IntegerField(primary_key=True, serialize=False)),
                ('zone_name', models.CharField()),
                ('zone_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'db_table': 'taxi_zones',
            },
        ),
        migrations.CreateModel(
            name='ZoneBusynessScore',
            fields=[
                ('score', models.FloatField()),
                ('zone', models.IntegerField()),
                ('hour', models.DateTimeField()),
                ('centroid', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('zone_busyness_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'zoned_busyness_score',
            },
        ),
        migrations.CreateModel(
            name='ZonedStreet',
            fields=[
                ('zoned_street_id', models.AutoField(primary_key=True, serialize=False)),
                ('street_address', models.CharField()),
                ('street_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
                ('street_centroid', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('zone_id', models.IntegerField()),
            ],
            options={
                'db_table': 'zoned_streets',
            },
        ),
        migrations.CreateModel(
            name='BusinessUnit',
            fields=[
                ('permit_id', models.CharField(primary_key=True, serialize=False)),
                ('unit_name', models.CharField()),
                ('unit_type', models.CharField()),
                ('permit_expiry_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'business_units',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('operation', models.CharField(max_length=50)),
                ('entity', models.CharField(max_length=50)),
                ('entity_id', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'logs',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('service_id', models.AutoField(primary_key=True, serialize=False)),
                ('service_date', models.DateField()),
                ('service_start_time', models.TimeField()),
                ('service_end_time', models.TimeField()),
                ('location_coords', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('location_address', models.CharField(max_length=128)),
                ('revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.businessunit')),
            ],
            options={
                'db_table': 'services',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('licence_id', models.CharField(primary_key=True, serialize=False)),
                ('vendor_name', models.CharField()),
                ('licence_expiry_date', models.DateField()),
                ('vendor_email', models.CharField(max_length=254, unique=True)),
                ('vendor_phone_number', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vendors',
            },
        ),
        migrations.CreateModel(
            name='ServiceVendor',
            fields=[
                ('service_vendor_id', models.AutoField(primary_key=True, serialize=False)),
                ('assigned_at', models.DateTimeField(auto_now=True, null=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.service')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.vendor')),
            ],
            options={
                'db_table': 'service_vendors',
            },
        ),
    ]
